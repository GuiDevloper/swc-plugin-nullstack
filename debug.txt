yarn run v1.22.18
$ cargo test

running 53 tests
test tests::remove_unused_from_client::keep_used_imports ... ok
test tests::remove_styles_on_server::remove_css ... ok
test tests::remove_styles_on_server::remove_sass ... ok
test tests::remove_unused_from_client::keep_css_imports ... ok
test tests::inject_source_to_events::skip_inject_source_to_node ... ok
test tests::remove_unused_from_client::keep_scss_imports ... ok
test tests::inject_source_to_events::skip_inject_duplicated_source_to_node ... ok
test tests::remove_unused_from_client::keep_used_when_jsx_conflict ... ok
test tests::remove_unused_from_client::keep_imports_without_identifiers ... ok
test tests::remove_styles_on_server::remove_scss ... ok
test tests::remove_unused_from_client::keep_runtime_import ... ok
test tests::remove_unused_from_client::keep_sass_imports ... ok
test tests::inject_source_to_events::inject_source_to_node ... ok
test tests::remove_unused_from_client::remove_unused_import ... ok
test tests::remove_unused_from_client::remove_unused_when_this_conflict ... ok
test tests::remove_unused_from_client::remove_unused_when_used_as_key ... ok
test tests::replace_ref_on_attributes::replace_bind_array_with_literal_index ... ok
test tests::inject_runtime_to_module::inject_runtime_to_functions ... ok
test tests::replace_ref_on_attributes::replace_bind_array_with_private_index ... ok
test tests::inject_hash_to_class::inject_prod_hash ... ok
test tests::inject_hash_to_class::inject_dev_hash ... ok
test tests::inject_restart_to_module::inject_restart ... ok
test tests::inject_restart_to_module::inject_restart_unusual_nullstack_ident ... ok
test tests::replace_ref_on_attributes::replace_ref_array_with_variable_index ... ok
test tests::register_server_functions_on_server::register_server_functions ... ok
test tests::inject_accept_to_module::inject_accept_when_exporting_as_default ... ok
test tests::inject_accept_to_module::inject_accept ... ok
test tests::replace_ref_on_attributes::replace_ref_array_with_variable_index_map ... ok
test tests::inject_accept_to_module::inject_multiple_accept ... ok
test tests::replace_ref_on_attributes::replace_bind_array_with_variable_index ... ok
test tests::replace_ref_on_attributes::replace_ref_array_with_private_index ... ok
test tests::register_server_functions_on_server::skip_register_server_functions_with_multiple_classes ... ok
test tests::inject_accept_to_module::inject_accept_when_exporting_as_named ... ok
test tests::remove_unused_from_client::remove_unused_when_redeclared ... ok
test tests::inject_runtime_to_module::inject_runtime_to_classes ... ok
test tests::replace_ref_on_attributes::replace_ref_array_with_literal_index ... ok
test tests::register_server_functions_on_server::register_server_functions_when_exported_as_named ... ok
test tests::replace_server_functions_on_client::remove_server_functions_starting_with_underline ... ok
test tests::inject_restart_to_module::inject_restart_unusual_application_ident ... ok
test tests::register_server_functions_on_server::skip_register_server_functions_starting_with_underline ... ok
test tests::inject_accept_to_module::inject_multiple_imports ... ok
test tests::replace_server_functions_on_client::skip_inject_invoke_when_not_async ... ok
test tests::replace_ref_on_attributes::replace_ref_array_with_variable_index_on_variable ... ok
test tests::replace_server_functions_on_client::skip_inject_invoke_when_not_static ... ok
test tests::remove_unused_from_client::remove_unused_when_member_conflict ... ok
test tests::inject_inner_components_to_class::inject_inner_components_when_nested_top_level_conflict ... FAILED
test tests::remove_unused_from_client::remove_unused_when_redeclared_and_reused ... ok
test tests::register_server_functions_on_server::register_server_functions_when_exported_as_default ... ok
test tests::replace_ref_on_attributes::replace_simple_bind ... ok
test tests::replace_server_functions_on_client::inject_invoke ... ok
test tests::register_server_functions_on_server::register_server_functions_with_multiple_classes ... ok
test tests::replace_ref_on_attributes::replace_simple_ref ... ok
test tests::replace_server_functions_on_client::inject_invoke_when_exported_as_named ... ok

failures:

---- tests::inject_inner_components_to_class::inject_inner_components_when_nested_top_level_conflict stdout ----
  [32m INFO[0m  [32mDiagnostics will be printed to stderr as logging level is trace or debug[0m
    [2;3mat[0m C:\Users\chris\.cargo\registry\src\github.com-1ecc6299db9ec823\testing-0.31.33\src\errors\stderr.rs:17

----- Actual -----
  [32m INFO[0m  [32m



---------------Module {
    span: Span {
        lo: BytePos(
            247,
        ),
        hi: BytePos(
            404,
        ),
        ctxt: #0,
    },
    body: [
        Stmt(
            Decl(
                Var(
                    VarDecl {
                        span: Span {
                            lo: BytePos(
                                247,
                            ),
                            hi: BytePos(
                                284,
                            ),
                            ctxt: #0,
                        },
                        kind: "const",
                        declare: false,
                        decls: [
                            VarDeclarator {
                                span: Span {
                                    lo: BytePos(
                                        253,
                                    ),
                                    hi: BytePos(
                                        284,
                                    ),
                                    ctxt: #0,
                                },
                                name: Ident(
                                    BindingIdent {
                                        id: Ident {
                                            span: Span {
                                                lo: BytePos(
                                                    253,
                                                ),
                                                hi: BytePos(
                                                    259,
                                                ),
                                                ctxt: #1,
                                            },
                                            sym: Atom('object' type=static),
                                            optional: false,
                                        },
                                        type_ann: None,
                                    },
                                ),
                                init: Some(
                                    Object(
                                        ObjectLit {
                                            span: Span {
                                                lo: BytePos(
                                                    262,
                                                ),
                                                hi: BytePos(
                                                    284,
                                                ),
                                                ctxt: #0,
                                            },
                                            props: [
                                                Prop(
                                                    KeyValue(
                                                        KeyValueProp {
                                                            key: Ident(
                                                                Ident {
                                                                    span: Span {
                                                                        lo: BytePos(
                                                                            263,
                                                                        ),
                                                                        hi: BytePos(
                                                                            277,
                                                                        ),
                                                                        ctxt: #0,
                                                                    },
                                                                    sym: Atom('InnerComponent' type=dynamic),
                                                                    optional: false,
                                                                },
                                                            ),
                                                            value: Lit(
                                                                Bool(
                                                                    Bool {
                                                                        span: Span {
                                                                            lo: BytePos(
                                                                                279,
                                                                            ),
                                                                            hi: BytePos(
                                                                                283,
                                                                            ),
                                                                            ctxt: #0,
                                                                        },
                                                                        value: true,
                                                                    },
                                                                ),
                                                            ),
                                                        },
                                                    ),
                                                ),
                                            ],
                                        },
                                    ),
                                ),
                                definite: false,
                            },
                        ],
                    },
                ),
            ),
        ),
        Stmt(
            Decl(
                Class(
                    ClassDecl {
                        ident: Ident {
                            span: Span {
                                lo: BytePos(
                                    299,
                                ),
                                hi: BytePos(
                                    308,
                                ),
                                ctxt: #1,
                            },
                            sym: Atom('Component' type=dynamic),
                            optional: false,
                        },
                        declare: false,
                        class: Class {
                            span: Span {
                                lo: BytePos(
                                    293,
                                ),
                                hi: BytePos(
                                    404,
                                ),
                                ctxt: #0,
                            },
                            decorators: [],
                            body: [
                                Method(
                                    ClassMethod {
                                        span: Span {
                                            lo: BytePos(
                                                323,
                                            ),
                                            hi: BytePos(
                                                394,
                                            ),
                                            ctxt: #0,
                                        },
                                        key: Ident(
                                            Ident {
                                                span: Span {
                                                    lo: BytePos(
                                                        323,
                                                    ),
                                                    hi: BytePos(
                                                        329,
                                                    ),
                                                    ctxt: #0,
                                                },
                                                sym: Atom('render' type=inline),
                                                optional: false,
                                            },
                                        ),
                                        function: Function {
                                            params: [],
                                            decorators: [],
                                            span: Span {
                                                lo: BytePos(
                                                    323,
                                                ),
                                                hi: BytePos(
                                                    394,
                                                ),
                                                ctxt: #0,
                                            },
                                            body: Some(
                                                BlockStmt {
                                                    span: Span {
                                                        lo: BytePos(
                                                            332,
                                                        ),
                                                        hi: BytePos(
                                                            394,
                                                        ),
                                                        ctxt: #0,
                                                    },
                                                    stmts: [
                                                        Return(
                                                            ReturnStmt {
                                                                span: Span {
                                                                    lo: BytePos(
                                                                        350,
                                                                    ),
                                                                    hi: BytePos(
                                                                        380,
                                                                    ),
                                                                    ctxt: #0,
                                                                },
                                                                arg: Some(
                                                                    JSXFragment(
                                                                        JSXFragment {
                                                                            span: Span {
                                                                                lo: BytePos(
                                                                                    357,
                                                                                ),
                                                                                hi: BytePos(
                                                                                    380,
                                                                                ),
                                                                                ctxt: #0,
                                                                            },
                                                                            opening: JSXOpeningFragment {
                                                                                span: Span {
                                                                                    lo: BytePos(
                                                                                        357,
                                                                                    ),
                                                                                    hi: BytePos(
                                                                                        359,
                                                                                    ),
                                                                                    ctxt: #0,
                                                                                },
                                                                            },
                                                                            children: [
                                                                                JSXElement(
                                                                                    JSXElement {
                                                                                        span: Span {
                                                                                            lo: BytePos(
                                                                                                359,
                                                                                            ),
                                                                                            hi: BytePos(
                                                                                                377,
                                                                                            ),
                                                                                            ctxt: #0,
                                                                                        },
                                                                                        opening: JSXOpeningElement {
                                                                                            name: Ident(
                                                                                                Ident {
                                                                                                    span: Span {
                                                                                                        lo: BytePos(
                                                                                                            360,
                                                                                                        ),
                                                                                                        hi: BytePos(
                                                                                                            374,
                                                                                                        ),
                                                                                                        ctxt: #2,
                                                                                                    },
                                                                                                    sym: Atom('InnerComponent' type=dynamic),
                                                                                                    optional: false,
                                                                                                },
                                                                                            ),
                                                                                            span: Span {
                                                                                                lo: BytePos(
                                                                                                    359,
                                                                                                ),
                                                                                                hi: BytePos(
                                                                                                    377,
                                                                                                ),
                                                                                                ctxt: #0,
                                                                                            },
                                                                                            attrs: [],
                                                                                            self_closing: true,
                                                                                            type_args: None,
                                                                                        },
                                                                                        children: [],
                                                                                        closing: None,
                                                                                    },
                                                                                ),
                                                                            ],
                                                                            closing: JSXClosingFragment {
                                                                                span: Span {
                                                                                    lo: BytePos(
                                                                                        377,
                                                                                    ),
                                                                                    hi: BytePos(
                                                                                        380,
                                                                                    ),
                                                                                    ctxt: #0,
                                                                                },
                                                                            },
                                                                        },
                                                                    ),
                                                                ),
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                            is_generator: false,
                                            is_async: false,
                                            type_params: None,
                                            return_type: None,
                                        },
                                        kind: Method,
                                        is_static: false,
                                        accessibility: None,
                                        is_abstract: false,
                                        is_optional: false,
                                        is_override: false,
                                    },
                                ),
                            ],
                            super_class: None,
                            is_abstract: false,
                            type_params: None,
                            super_type_params: None,
                            implements: [],
                        },
                    },
                ),
            ),
        ),
    ],
    shebang: None,
}----------



[0m
    [2;3mat[0m src\loaders\inject_inner_components_to_class.rs:62

  [34mDEBUG[0m  [34mRenaming `object#1` to `object`[0m
    [2;3mat[0m C:\Users\chris\.cargo\registry\src\github.com-1ecc6299db9ec823\swc_ecma_transforms_base-0.116.9\src\rename\analyzer\scope.rs:183

  [34mDEBUG[0m  [34mRenaming `Component#1` to `Component`[0m
    [2;3mat[0m C:\Users\chris\.cargo\registry\src\github.com-1ecc6299db9ec823\swc_ecma_transforms_base-0.116.9\src\rename\analyzer\scope.rs:183

SingleThreadedComments { leading: RefCell { value: {} }, trailing: RefCell { value: {} } }
SingleThreadedComments { leading: RefCell { value: {} }, trailing: RefCell { value: {} } }
>>>>> [32mOrig[0m <<<<<

        const object = {InnerComponent: true}
        class Component {
            render() {
                return <><InnerComponent /></>
            }
        }
    
>>>>> [32mCode[0m <<<<<
const object = {
    InnerComponent: true
};
class Component {
    render() {
        return <><InnerComponent/></>;
    }
}

thread 'tests::inject_inner_components_to_class::inject_inner_components_when_nested_top_level_conflict' panicked at 'assertion failed: `(left == right)`
            const object = {
    InnerComponent: true
};
class Component {
    render() {
[92m        const InnerComponent = this.renderInnerComponent;[0m
        return <><InnerComponent/></>;
    }
}

', C:\Users\chris\.cargo\registry\src\github.com-1ecc6299db9ec823\swc_ecma_transforms_testing-0.119.9\src\lib.rs:337:13
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    tests::inject_inner_components_to_class::inject_inner_components_when_nested_top_level_conflict

test result: FAILED. 52 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.02s

info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
